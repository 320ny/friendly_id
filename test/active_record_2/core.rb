require File.dirname(__FILE__) + '/../test_helper'

module FriendlyId

  module Test

    module ActiveRecord2

      module TestCore

        extend Declarative

        def teardown
          klass.delete_all
          other_class.delete_all
          $slug_class.delete_all
        end

        def instance
          raise NotImplementedError
        end

        def klass
          raise NotImplementedError
        end

        def other_class
          raise NotImplementedError
        end

        test "models should have a friendly id config" do
          assert_not_nil klass.friendly_id_config
        end

        test "instances should have a friendly id" do
          assert_match(/hello/, instance.friendly_id)
        end
        
        test "should return their friendly_id for #to_param" do
          assert_match(instance.friendly_id, instance.to_param)
        end

        test "friendly_ids starting with the numeric id should be considered a different id" do
          assert_raise ActiveRecord::RecordNotFound do
            klass.find("#{instance.id}-i-dont-exist")
          end
        end

        test "instances should have a friendly id status" do
          assert_not_nil instance.friendly_id_status
        end

        test "instances should be findable by their friendly id" do
          assert_equal instance, klass.find(instance.friendly_id)
        end

        test "instances should be findable by their numeric id as an integer" do
          assert_equal instance, klass.find(instance.id.to_i)
        end

        test "instances should be findable by their numeric id as a string" do
          assert_equal instance, klass.find(instance.id.to_s)
        end

        test "instances should be findable by their own instance" do
          assert_equal instance, klass.find(instance)
        end

        test "instances should be findable by an array of friendly_ids" do
          second = klass.create!(:name => "second_instance")
          assert_equal 2, klass.find([instance.friendly_id, second.friendly_id]).size
        end

        test "instances should be findable by an array of numeric ids" do
          second = klass.create!(:name => "second_instance")
          assert_equal 2, klass.find([instance.id.to_i, second.id.to_i]).size
        end

        test "instances should be findable by an array of numeric ids as strings" do
          second = klass.create!(:name => "second_instance")
          assert_equal 2, klass.find([instance.id.to_s, second.id.to_s]).size
        end

        test "instances should be findable by an array of instances" do
          second = klass.create!(:name => "second_instance")
          assert_equal 2, klass.find([instance, second]).size
        end

        test "instances should be findable by an array of mixed types" do
          second = klass.create!(:name => "second_instance")
          assert_equal 2, klass.find([instance.friendly_id, second]).size
        end

        test "models should raise an error when not all records are found" do
          assert_raises(ActiveRecord::RecordNotFound) do
            klass.find([instance.friendly_id, 'bad-friendly-id'])
          end
        end

        test "models should respect finder conditions" do
          assert_raise ActiveRecord::RecordNotFound do
            klass.find(instance.friendly_id, :conditions => "1 = 2")
          end
        end

        test "creation should raise an error if the friendly_id text is reserved" do
          # Note that the class of the error raised is left to the implementation.
          assert_raise FriendlyId::ReservedError, ActiveRecord::RecordInvalid do
            klass.create!(:name => "new")
          end
        end

        test "creation should raise an error if the friendly_id text is an empty string" do
          assert_raise FriendlyId::BlankError, ActiveRecord::RecordInvalid do
            klass.create!(:name => "")
          end
        end

        test "creation should raise an error if the friendly_id text is a blank string" do
          assert_raise FriendlyId::BlankError, ActiveRecord::RecordInvalid do
            klass.create!(:name => "  ")
          end
        end

        test "creation should raise an error if the friendly_id text is nil" do
          assert_raise FriendlyId::BlankError, ActiveRecord::RecordInvalid do
            klass.create!(:name => nil)
          end
        end

        test "should allow the same friendly_id across models" do
          other_instance = other_class.create!(:name => instance.name)
          assert_equal other_instance.friendly_id, instance.friendly_id
        end

        # This emulates a fairly common issue where id's generated by fixtures are very high.
        should "continue to admit very large ids" do
          klass.connection.execute("INSERT INTO #{klass.table_name} (id, name) VALUES (2147483647, 'An instance')")
          assert klass.base_class.find(2147483647)
        end

      end
    end
  end
end